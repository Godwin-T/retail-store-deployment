name: Terraform CD

on:
  workflow_run:
    workflows: ["Terraform CI"]
    types: [completed]

permissions:
  id-token: write
  contents: read

concurrency:
  group: terraform-cd
  cancel-in-progress: false

jobs:
  terraform-apply:
    name: Terraform Apply (saved plan)
    # Only run when CI succeeded for a push to main
    if: >-
      ${{ github.event.workflow_run.conclusion == 'success' &&
          github.event.workflow_run.event == 'push' &&
          github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest
    environment: prod
    defaults:
      run:
        working-directory: infra/terraform
    outputs:
      cluster_name: ${{ steps.get_cluster_name.outputs.cluster_name }}
      region: ${{ steps.get_region.outputs.region }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: |
          terraform init -input=false -reconfigure \
            -backend-config=bucket=${{ secrets.TF_STATE_BUCKET }} \
            -backend-config=key=${{ secrets.BUCKET_KEY}} \
            -backend-config=region=${{ secrets.AWS_REGION }} \
            -backend-config=dynamodb_table=${{ secrets.TF_STATE_LOCK_TABLE }} \
            -backend-config=encrypt=true

      - name: Terraform Plan (save)
        run: terraform plan -input=false -no-color -out .tfplan

      - name: Terraform Apply (use saved plan)
        run: terraform apply -input=false -auto-approve .tfplan

      - name: Get cluster name output
        id: get_cluster_name
        run: |
          echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT

      - name: Get region
        id: get_region
        run: |
          echo "region=${{ secrets.AWS_REGION }}" >> $GITHUB_OUTPUT
